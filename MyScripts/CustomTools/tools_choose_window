import maya.cmds as cmds
from PySide2 import QtWidgets, QtCore, QtGui

# Main window
class MyToolsChooseWindow(QtWidgets.QDialog):
    def __init__(self):
        super(MyToolsChooseWindow, self).__init__()

        self.i = 0
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("Choose Tools")
        self.setObjectName("MyToolsChooseWindowUIId")
        self.setMinimumSize(300, 500)
        self.resize(300, 500)
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        # main layout 
        self.main_layout = QtWidgets.QVBoxLayout()
        self.main_layout.setAlignment(QtCore.Qt.AlignTop)
        self.main_layout.setContentsMargins(5,5,5,5)
        self.main_layout.setSpacing(5)
        self.setLayout(self.main_layout)

        # scroll area -------------------------------
        self.scrollArea = QtWidgets.QScrollArea()
        self.scrollArea.setMinimumHeight(200)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setMinimumWidth(290)
        # self.scrollArea.setMaximumWidth(390)
        self.scrollArea.setFocusPolicy( QtCore.Qt.NoFocus )
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        # self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scroll_area_widget = QtWidgets.QWidget()
        self.scrollArea.setWidget(self.scroll_area_widget)
        self.scroll_layout = QtWidgets.QVBoxLayout()
        self.scroll_layout.setAlignment(QtCore.Qt.AlignTop)
        self.scroll_layout.setContentsMargins(0,0,5,0)
        self.scroll_layout.setSpacing(5) #layout
        self.scroll_area_widget.setLayout(self.scroll_layout)
        self.main_layout.addWidget(self.scrollArea) #add to main layout
        #--------------------------------------------------

        # add button
        self.button_add = QtWidgets.QPushButton("Add Set")
        self.button_add.setMinimumHeight(44)
        self.button_add.clicked.connect(self.on_button_add_clicked)
        self.main_layout.addWidget(self.button_add)


def main():
    # A regular way to do window thing
    if cmds.window("MyToolsChooseWindowUIId", exists=1):
        cmds.deleteUI("MyToolsChooseWindowUIId")
    
    if cmds.windowPref("MyToolsChooseWindowUIId", exists=1):
        cmds.windowPref("MyToolsChooseWindowUIId", remove=1)

    global myUI
    myUI = MyToolsChooseWindow()
    myUI.show()

if __name__ == "__main__":
    main()









    # def write_json(self, path, name):
    #     with open (path + "/" + name + ".json", "w") as f:
    #         f.write(json.dumps(self.jsonData, indent = 4, sort_keys = True))
        
